# This is a basic workflow to help you get started with Actions

name: VUE3 PROJECT MAXER FRONT CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 指定node版本
      - name: '指定Node版本'
        uses: actions/setup-node@v2.5.0
        with:
          node-version: '14'
      # 下载源码
      - name: Checkout
        uses: actions/checkout@master
      - run: npm install
      - run: npm run build
      - run: tar -zcvf release.tgz *
        working-directory: ./dist
      - run: echo '打包成功....'
        
      # 第三步：发布 Release
      - name: Create Release # 创建Release，可以在仓库看到一个个版本
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # 之前GitHub添加的Token
        with:
          tag_name: ${{ github.ref }} # (tag)标签名称
          release_name: Release ${{ github.ref }}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布
      # 第四步：上传构建结果到 Release（把打包的tgz上传到Release）
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./dist/release.tgz # 要上传文件
          asset_name: release.tgz # 上传后的文件名
          asset_content_type: application/x-tgz
      - name: Delete before Version
        uses: appleboy/ssh-action@master # 使用ssh链接服务器
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd /www/wwwroot/maxer.imsle.com
            echo '清空当前版本'
            rm -rf *
            echo '清空成功'
            echo '开始替换最新版本'
      - name: Deploy for Private
        uses: easingthemes/ssh-deploy@v2.1.5
        with:
          REMOTE_HOST: ${{ secrets.HOST }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          REMOTE_PORT: ${{ secrets.PORT }}
          TARGET: /www/wwwroot/maxer.imsle.com
          SOURCE: dist/
          SSH_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          
      # 第五步：部署到服务器 - 公有仓库可以这样部署
#       - name: Deploy
#         uses: appleboy/ssh-action@master # 使用ssh链接服务器
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERNAME }}
#           password: ${{ secrets.PASSWORD }}
#           port: ${{ secrets.PORT }}
#           script: | # 执行命令（运行到服务器）cd：要确保服务器有这个目录； wget：下载上一步的release到服务器； tar：解压； 安装依赖；启动服务
#             cd /www/wwwroot/maxer.imsle.com
#             echo "清空当前版本"
#             rm -rf * 
#             echo "下载最新版本"
#             wget https://github.com/zangxiyang/maxer-front/releases/latest/download/release.tgz -O release.tgz
#             tar zxvf release.tgz
#             echo "版本发布成功"


